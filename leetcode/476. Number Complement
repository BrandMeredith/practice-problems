"""
Given a positive integer num, output its complement number. The complement strategy is to flip the bits of its binary representation.

 

Example 1:

Input: num = 5
Output: 2
Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.
Example 2:

Input: num = 1
Output: 0
Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.
 

Constraints:

The given integer num is guaranteed to fit within the range of a 32-bit signed integer.
num >= 1
You could assume no leading zero bit in the integerâ€™s binary representation.
This question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/
"""
class Solution:
  def findComplement(self, num: int) -> int:
      digit = 0
      out = 0
      while num > 0:
          if num%2 == 0:
              out += 2**digit
          num = num//2
          digit += 1
      return out

"""
## Stolen
class Solution:
    def findComplement(self, num: int) -> int:
        # first create a number that's just a list of 1s in binary of the same length as num
        # This is done by assuming that the first digit is a 1, then using that to make sure the next digit it 1, then using that to make sure that the third and 4th digits are 1, etc
        # Note, this creates at max a 32 bit number made up of all 1s
        bitmask = num
        bitmask |= bitmask >> 1
        bitmask |= bitmask >> 2
        bitmask |= bitmask >> 4
        bitmask |= bitmask >> 8
        bitmask |= bitmask >> 16
        
        # next, do an exclusive or on num and the list of 1s (of the same length)
        return bitmask ^ num
"""
